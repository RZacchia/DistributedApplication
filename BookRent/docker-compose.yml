# reuseable settings

x-mssql-env: &mssql-env
  ACCEPT_EULA: "Y"
  MSSQL_PID: "Express"
  SA_PASSWORD: "Your_SA_Password_123!"
  
x-mssql-healthcheck: &mssql-healthcheck
  test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Your_SA_Password_123!", "-Q", "SELECT 1"]
  interval: 5s
  timeout: 3s
  retries: 20
  start_period: 20s
  
x-mssql-resources: &mssql-resources
  limits:
    memory: 3g
    cpus: 1
  reservations:
    memory: 2.0g

networks:
  public-net: {}           # shared app-to-app network (HTTP)
  catalog-net: {}          # private: Catalog app <-> Catalog DB
  identity-net: {}         # private: Identity app <-> Identity DB
  renting-net: {}          # private: Renting app <-> Renting DB
  user-net: {}

services:
  
  orchestrator-service:
    build:
      context: .
      dockerfile: BookRent.Orchestrator/Dockerfile
    container_name: orchestrator-service
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      CATALOG_URL: "catalog-service:8080"
      IDENTITY_URL: "identity-service:8080"
      RENTING_URL: "renting-service:8080"
      USER_URL: "user-service:8080"
    networks:
      - public-net
    ports:
      - "8080:8080"
  
  
  catalog-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: catalog-db
    deploy:
      resources:
        *mssql-resources
    environment:
      <<: *mssql-env
    ports:
      - "1433:1433"
    healthcheck:
      *mssql-healthcheck
    networks:
      - catalog-net
    volumes:
      - catalog_mssqldata:/var/opt/mssql
  catalog-service:
    build:
      context: .                 
      dockerfile: Services/BookRent.Catalog/Dockerfile
    container_name: catalog-service
    depends_on:
      catalog-db:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__CatalogDb: "Server=catalog-db,1433;Database=CatalogDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True;"
    networks:
      - public-net
      - catalog-net
    ports:
      - "8081:8080"
    restart: "always"
    
        
        
        
        
  identity-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: identity-db
    environment:
      <<: *mssql-env
    ports:
      - "1434:1433"
    healthcheck:
      *mssql-healthcheck
    networks:
      - identity-net
    volumes:
      - identity_mssqldata:/var/opt/mssql
  identity-service:
    build:
      context: .
      dockerfile: Services/BookRent.Identity/Dockerfile
    container_name: identity-service
    depends_on:
      identity-db:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__IdentityDb: "Server=identity-db,1433;Database=IdentityDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True;"
    networks:
      - public-net
      - identity-net
    ports:
      - "8082:8080"

  renting-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: renting-db
    environment:
      <<: *mssql-env
    ports:
      - "1435:1433"
    healthcheck:
      *mssql-healthcheck
    networks: 
      - "renting-net"
    volumes:
      - renting_mssqldata:/var/opt/mssql
  renting-service:
    build:
      context: .
      dockerfile: Services/BookRent.Renting/Dockerfile
    container_name: renting-service
    depends_on:
      renting-db:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__RentingDb: "Server=renting-db,1433;Database=RentingDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True;"
    networks:
      - public-net
      - renting-net
    ports:
      - "8083:8080"

  user-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: user-db
    environment:
      <<: *mssql-env
    ports:
      - "1436:1433"
    healthcheck:
      *mssql-healthcheck
    networks:
      - user-net
    volumes:
      - user_mssqldata:/var/opt/mssql
  user-service:
    build:
      context: .
      dockerfile: Services/BookRent.User/Dockerfile
    container_name: user-service
    depends_on:
      user-db:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__UserDb: "Server=user-db,1433;Database=UserDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True;"
    networks:
      - public-net
      - user-net
    ports:
      - "8084:8080"

volumes:
  catalog_mssqldata:
  identity_mssqldata:
  renting_mssqldata:
  user_mssqldata:
